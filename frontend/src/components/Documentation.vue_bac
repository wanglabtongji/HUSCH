<template>
  <div id="Documentation">
    <el-row> </el-row>
    <el-row :gutter="20">
      <el-col :span="10">
        <el-card class="box-card">
          <el-select v-model="value" placeholder="Select Cell-type Level">
            <el-option
              v-for="item in options"
              :key="item.value"
              :label="item.label"
              :value="item.value"
              @click.native="selectThing(item)"
            >
            </el-option>
          </el-select>
          <el-scrollbar>
            <div>
              <el-tree
                ref="tree"
                accordion
                :data="treeData"
                highlight-current
                @node-click="getCurrentNode"
                @node-collapse="collapseNode"
                :render-content="renderContent"
                v-show="isShowlevel2"
              >
                <span slot-scope="{ node, data }" class="custom-tree-node">
                  <span>
                    <i
                      v-if="data.icon"
                      :class="'tree-icon iconfont ' + data.icon"
                    />
                    <span class="tree-text">{{ node.label }}</span>
                  </span>
                </span>
              </el-tree>
            </div>
            <div>
              <el-tree
                ref="tree"
                accordion
                :data="treeData3"
                highlight-current
                @node-click="getCurrentNode"
                @node-collapse="collapseNode"
                :render-content="renderContent"
                v-show="isShowlevel3"
              >
                <span slot-scope="{ node, data }" class="custom-tree-node">
                  <span>
                    <i
                      v-if="data.icon"
                      :class="'tree-icon iconfont ' + data.icon"
                    />
                    <span class="tree-text">{{ node.label }}</span>
                  </span>
                </span>
              </el-tree>
            </div>
          </el-scrollbar>
        </el-card>
      </el-col>
      <!-- <el-col :span="14">
        <el-card v-if="showtissue">
          <h3>{{ tissuename }}</h3>
        </el-card>
      </el-col>
      <el-col :span="10">
        <el-card class="box-card">
          <p><b>Annotation Level:</b> {{label}}</p>
          <p><b>Tissue:</b> {{tissuename}}</p>
          <p><b>Cell Type:</b></p>
        </el-card>
      </el-col> -->
    </el-row>
  </div>
</template>

<script>
import axios from "axios";
import summary_celltype_l2 from "@/assets/summary_celltype_l2.json"; // 引用
import summary_celltype_l3 from "@/assets/summary_celltype_l3.json"; // 引用

export default {
  data() {
    return {
      treeData: [],
      treeData3: [],
      tempList: [],
      tempList3: [],

      showtissue: false,
      tissuename: "",
      isShowlevel2: false,
      isShowlevel3: false,

      options: [
        {
          value: "Level2",
          label: "Major",
        },
        {
          value: "Level3",
          label: "Minor",
        },
      ],
      value: "",
    };
  },
  created() {
    this.getTreeData();
    this.getTreeData3();
  },
  methods: {
    selectThing(item) {
      if (item.value === "Level2") {
        //options中的value
        this.isShowlevel2 = true;
        this.isShowlevel3 = false;
      } else if (item.value === "Level3") {
        this.isShowlevel2 = false;
        this.isShowlevel3 = true;
      }
    },

    renderContent(h, { node, data, store }) {
      return (
        <span class="custom-tree-node">
          <span>{node.label}</span>
        </span>
      );
    },

    getCurrentNode() {
      console.log(this.$refs.tree.getCurrentNode().label);
      this.tissuename = this.$refs.tree.getCurrentNode().label;
    //   console.log(tissuename);
      this.showtissue = true;
    },

    collapseNode() {
      this.showtissue = false;
    },

    async getTreeData() {
      this.tempList = summary_celltype_l2;
      const temp_list = [];

      for (var i = 0; i < this.tempList.length; i++) {
        const obj = {
          label: this.tempList[i].Tissue,
          id: i + 1,
          children: [],
        };
        if (this.tempList[i].celltype.length >= 1) {
          let temp = this.tempList[i].celltype.length;
          while (temp > 0) {
            const obj_child = {
              label:
                this.tempList[i].celltype[
                  this.tempList[i].celltype.length - temp
                ],
              id: (i + 1) * 100 + this.tempList[i].celltype.length - temp,
            };
            temp--;
            obj.children.push(obj_child);
          }
        }
        temp_list.push(obj);
      }
      this.treeData = temp_list;
    },

    async getTreeData3() {
      this.tempList3 = summary_celltype_l3;
      const temp_list3 = [];

      for (var i = 0; i < this.tempList3.length; i++) {
        const obj = {
          label: this.tempList3[i].Tissue,
          id: i + 1,
          children: [],
        };
        if (this.tempList3[i].celltype.length >= 1) {
          let temp = this.tempList3[i].celltype.length;
          while (temp > 0) {
            const obj_child = {
              label:
                this.tempList3[i].celltype[
                  this.tempList3[i].celltype.length - temp
                ],
              id: (i + 1) * 100 + this.tempList3[i].celltype.length - temp,
            };
            temp--;
            obj.children.push(obj_child);
          }
        }
        temp_list3.push(obj);
      }
      this.treeData3 = temp_list3;
    },
  },
};
</script>
    



<style lang="scss" scoped>
.el-tree {
  background: transparent;
  padding-top: 20px;
}

.custom-tree-node {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: space-between;
  font-size: 14px;
  padding-right: 8px;
  background-color: blue;
}

.el-tree-node__label {
  font-size: 14px;
}
</style>